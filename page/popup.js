// Generated by CoffeeScript 1.4.0

define(function(require, exports) {
  var article_data, auth, backend, config, editor, my, paper, popup, preview, reader, split_tags;
  exports.elem = popup = $("#popup");
  paper = $("#paper");
  config = require("./config");
  backend = require("./backend");
  marked.setOptions({
    gfm: true,
    breaks: true,
    sanitize: false
  });
  my = {
    "new": function() {
      return this.id = (new Date).getTime().toString();
    },
    data: {}
  };
  my["new"]();
  exports.split_tags = split_tags = function(str) {
    return str.split(" ").filter(function(s) {
      return s[0] != null;
    });
  };
  article_data = function() {
    var data;
    return data = {
      id: my.id,
      tags: split_tags(paper.find(".tags").val()),
      title: paper.find(".title").val(),
      content: paper.find("textarea").val()
    };
  };
  auth = function() {
    return $(lilyturf.dom(function() {
      return this.div({
        "class": "auth"
      }, this.input({
        "class": "password",
        type: "password"
      }));
    }));
  };
  editor = function(data) {
    var tags;
    tags = data.tags != null ? data.tags.join(" ") : "";
    return $(lilyturf.dom(function() {
      return this.div({
        "class": "editor vertical-list"
      }, this.input({
        "class": "tags",
        value: tags
      }), this.input({
        "class": "title",
        value: data.title || ""
      }), this.textarea({
        "class": "content"
      }, this.text(data.content || "")), this.div({
        "class": "control horizontal"
      }, this.div({
        "class": "save button"
      }, this.text("Save")), this.div({
        "class": "preview button"
      }, this.text("Preview")), this.div({
        "class": "remove button"
      }, this.text("Remove")), this.div({
        "class": "exit button"
      }, this.text("Exit"))));
    }));
  };
  preview = function(data) {
    return $(lilyturf.dom(function() {
      return this.div({
        "class": "preview article vertical-list"
      }, this.code({
        "class": "tags"
      }, this.text(data.tags.join(" "))), this.div({
        "class": "title"
      }, this.text(data.title)), this.div({
        "class": "content"
      }, this.html(marked(data.content))), this.div({
        "class": "control horizontal"
      }, this.div({
        "class": "edit button"
      }, this.text("Edit"))));
    }));
  };
  reader = function(data) {
    var link;
    link = "/blog/" + data.id;
    return $(lilyturf.dom(function() {
      return this.div({
        "class": "reader article vertical-list"
      }, this.code({
        "class": "tags"
      }, this.text(data.tags.join(" "))), this.div({
        "class": "title"
      }, this.text(data.title)), this.div({
        "class": "line"
      }, this.code({
        "class": "time"
      }, this.text(data.time)), this.a({
        href: link,
        target: "_blank"
      }, this.text("direct link"))), this.div({
        "class": "content"
      }, this.html(marked(data.content))), this.div({
        "class": "control horizontal"
      }, this.div({
        "class": "edit button"
      }, this.text("Edit"))));
    }));
  };
  exports.auth = function() {
    exports.show();
    paper.empty().append(auth());
    return paper.find("input").focus().keydown(function(e) {
      var password, _ref;
      if ((_ref = e.keyCode) === 13 || _ref === 32) {
        password = $(this).val();
        backend.auth(password);
        return localStorage.setItem("password", password);
      }
    });
  };
  exports.reader = function(data) {
    my.id = data.id;
    exports.show();
    return backend.fetch(data, function(item) {
      data.content = item.content || "";
      data.time = item.time;
      paper.empty().append(reader(data));
      return paper.find(".edit").click(function() {
        return exports.edit(data);
      });
    });
  };
  exports.create = function() {
    exports.show();
    my["new"]();
    return exports.edit({});
  };
  exports.preview = function() {
    var data;
    data = article_data();
    my.data = data;
    paper.empty().append(preview(data));
    return paper.find(".edit").click(function() {
      return exports.edit(data);
    });
  };
  exports.edit = function(data) {
    paper.empty().append(editor(data));
    paper.find(".tags").focus();
    paper.find(".save").click(function() {
      backend.update(article_data());
      return exports.preview();
    });
    paper.find(".preview").click(function() {
      return exports.preview();
    });
    paper.find(".exit").click(function() {
      return exports.hide();
    });
    return paper.find(".remove").click(function() {
      return backend.remove(data, function() {
        return exports.hide();
      });
    });
  };
  exports.show = function() {
    return popup.fadeIn(config.fadeIn_duration);
  };
  exports.hide = function() {
    return popup.fadeOut(config.fadeOut_duration);
  };
  return exports;
});
