// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require, exports) {
    var Ractive, ajax, article, articleTmpl, database, db, layout, layoutTmpl, marked, table, tableTmpl;
    layoutTmpl = require("text!view/layout.mustache");
    articleTmpl = require("text!view/article.mustache");
    tableTmpl = require("text!view/table.mustache");
    ajax = require("client/ajax");
    db = "http://broccoli.blog/";
    Ractive = require("Ractive");
    marked = require("marked");
    marked.setOptions({
      breaks: true,
      gfm: true
    });
    database = {};
    try {
      database = JSON.parse(localStorage.getItem("database"));
      database || (database = {});
    } catch (_error) {}
    window.addEventListener("beforeunload", function() {
      return localStorage.setItem("database", JSON.stringify(database || {}));
    });
    ajax.get(db, function(data) {
      database = data.data;
      database || (database = {});
      return table.set("list", data.data);
    }, function() {
      return console.log("fail");
    });
    layout = new Ractive({
      el: '#app',
      template: layoutTmpl,
      data: {
        inTable: true,
        showTable: function(inTable) {
          if (inTable) {
            return "";
          } else {
            return "hide";
          }
        },
        showArticle: function(inTable) {
          if (inTable) {
            return "hide";
          } else {
            return "";
          }
        },
        modified: false
      }
    });
    table = new Ractive({
      el: '#table',
      template: tableTmpl,
      data: {
        list: database
      }
    });
    article = new Ractive({
      el: '#article',
      template: articleTmpl,
      data: {
        title: "",
        content: "",
        time: "",
        markup: function(content) {
          return marked(content);
        },
        editing: false,
        hideEditor: function(editing) {
          if (editing) {
            return "";
          } else {
            return "hide";
          }
        },
        hidePreview: function(editing) {
          if (editing) {
            return "hide";
          } else {
            return "";
          }
        },
        showTime: function(timestamp) {
          var time;
          time = new Date(timestamp);
          return time.toDateString();
        }
      }
    });
    table.on("post", function(event) {
      layout.set("inTable", false);
      return article.set({
        time: (new Date).getTime(),
        title: "",
        content: "",
        editing: true,
        id: (new Date).getTime(),
        more: false
      });
    });
    layout.on("back", function(event) {
      return layout.set("inTable", true);
    });
    article.on("edit", function(event) {
      return article.set("editing", true);
    });
    article.on("save", function(event) {
      var aPost, data;
      article.set("editing", false);
      data = article.get();
      aPost = {
        title: data.title,
        content: data.content,
        time: (new Date).getTime(),
        id: data.id
      };
      if (aPost.title.length >= 0) {
        table.set("list." + aPost.id, aPost);
        database[aPost.id] = aPost;
        return layout.set("modified", true);
      }
    });
    table.on("open", function(event) {
      var data;
      data = event.context;
      article.set({
        title: data.title,
        content: data.content,
        id: data.id,
        time: data.time,
        editing: false,
        more: false
      });
      return layout.set("inTable", false);
    });
    article.on("more", function() {
      var more;
      more = article.get("more");
      if (more) {
        return article.set("more", false);
      } else {
        return article.set("more", true);
      }
    });
    article.on("delete", function(event) {
      var id;
      id = article.get("id");
      table.set("list." + id, void 0);
      delete database[id];
      return layout.set("inTable", true);
    });
    table.observe("query", function(newValue) {
      var words;
      words = newValue.split(" ");
      return Object.keys(database).map(function(id) {
        var show;
        show = words.every(function(word) {
          var title;
          word = word.toLowerCase();
          title = database[id].title.toLowerCase();
          return title.indexOf(word) >= 0;
        });
        return table.set("list." + id + ".hide", (show ? "" : "hide"));
      });
    });
    return layout.on("sync", function(event) {
      var data;
      data = {
        data: {},
        pass: window.pass || "wrong",
        user: "jiyinyiyong"
      };
      console.log("posting", data, database);
      return ajax.post(db, data, function() {
        return layout.set("modified", false);
      }, function() {
        return alert("update failed");
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
